/**
 * Infoplus API
 * Infoplus API.
 *
 * OpenAPI spec version: beta
 * Contact: api@infopluscommerce.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.infoplus);
  }
}(this, function(expect, infoplus) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new infoplus.Item();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Item', function() {
    it('should create an instance of Item', function() {
      // uncomment below and update the code to test Item
      //var instane = new infoplus.Item();
      //expect(instance).to.be.a(infoplus.Item);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property accountCodeId (base name: "accountCodeId")', function() {
      // uncomment below and update the code to test the property accountCodeId
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property lowStockContactId (base name: "lowStockContactId")', function() {
      // uncomment below and update the code to test the property lowStockContactId
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property legacyLowLevelContactId (base name: "legacyLowLevelContactId")', function() {
      // uncomment below and update the code to test the property legacyLowLevelContactId
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property lowStockCodeId (base name: "lowStockCodeId")', function() {
      // uncomment below and update the code to test the property lowStockCodeId
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property majorGroupId (base name: "majorGroupId")', function() {
      // uncomment below and update the code to test the property majorGroupId
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property subGroupId (base name: "subGroupId")', function() {
      // uncomment below and update the code to test the property subGroupId
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property productCodeId (base name: "productCodeId")', function() {
      // uncomment below and update the code to test the property productCodeId
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property summaryCodeId (base name: "summaryCodeId")', function() {
      // uncomment below and update the code to test the property summaryCodeId
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property buyerId (base name: "buyerId")', function() {
      // uncomment below and update the code to test the property buyerId
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property lobId (base name: "lobId")', function() {
      // uncomment below and update the code to test the property lobId
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property sku (base name: "sku")', function() {
      // uncomment below and update the code to test the property sku
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property vendorSKU (base name: "vendorSKU")', function() {
      // uncomment below and update the code to test the property vendorSKU
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property upc (base name: "upc")', function() {
      // uncomment below and update the code to test the property upc
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property itemDescription (base name: "itemDescription")', function() {
      // uncomment below and update the code to test the property itemDescription
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property packingSlipDescription (base name: "packingSlipDescription")', function() {
      // uncomment below and update the code to test the property packingSlipDescription
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property absoluteMax (base name: "absoluteMax")', function() {
      // uncomment below and update the code to test the property absoluteMax
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property additionalDescription (base name: "additionalDescription")', function() {
      // uncomment below and update the code to test the property additionalDescription
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property backorder (base name: "backorder")', function() {
      // uncomment below and update the code to test the property backorder
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property chargeCode (base name: "chargeCode")', function() {
      // uncomment below and update the code to test the property chargeCode
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property commodityCode (base name: "commodityCode")', function() {
      // uncomment below and update the code to test the property commodityCode
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property compCode (base name: "compCode")', function() {
      // uncomment below and update the code to test the property compCode
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property createDate (base name: "createDate")', function() {
      // uncomment below and update the code to test the property createDate
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property criticalAmount (base name: "criticalAmount")', function() {
      // uncomment below and update the code to test the property criticalAmount
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property overallFixedReorderPoint (base name: "overallFixedReorderPoint")', function() {
      // uncomment below and update the code to test the property overallFixedReorderPoint
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property overallLeadTime (base name: "overallLeadTime")', function() {
      // uncomment below and update the code to test the property overallLeadTime
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property sellPrice (base name: "sellPrice")', function() {
      // uncomment below and update the code to test the property sellPrice
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property pricingPer (base name: "pricingPer")', function() {
      // uncomment below and update the code to test the property pricingPer
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property lotControlFlag (base name: "lotControlFlag")', function() {
      // uncomment below and update the code to test the property lotControlFlag
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property maxCycle (base name: "maxCycle")', function() {
      // uncomment below and update the code to test the property maxCycle
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property maxInterim (base name: "maxInterim")', function() {
      // uncomment below and update the code to test the property maxInterim
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property numericSortOrder (base name: "numericSortOrder")', function() {
      // uncomment below and update the code to test the property numericSortOrder
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property outsideVendor (base name: "outsideVendor")', function() {
      // uncomment below and update the code to test the property outsideVendor
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property pickNo (base name: "pickNo")', function() {
      // uncomment below and update the code to test the property pickNo
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property podOrderSuffix (base name: "podOrderSuffix")', function() {
      // uncomment below and update the code to test the property podOrderSuffix
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property podRevDate (base name: "podRevDate")', function() {
      // uncomment below and update the code to test the property podRevDate
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property seasonalItem (base name: "seasonalItem")', function() {
      // uncomment below and update the code to test the property seasonalItem
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property requiresProductionLot (base name: "requiresProductionLot")', function() {
      // uncomment below and update the code to test the property requiresProductionLot
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property sector (base name: "sector")', function() {
      // uncomment below and update the code to test the property sector
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property secure (base name: "secure")', function() {
      // uncomment below and update the code to test the property secure
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property serialCode (base name: "serialCode")', function() {
      // uncomment below and update the code to test the property serialCode
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property unitCode (base name: "unitCode")', function() {
      // uncomment below and update the code to test the property unitCode
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property unitsPerWrap (base name: "unitsPerWrap")', function() {
      // uncomment below and update the code to test the property unitsPerWrap
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property weightPerWrap (base name: "weightPerWrap")', function() {
      // uncomment below and update the code to test the property weightPerWrap
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property voidDate (base name: "voidDate")', function() {
      // uncomment below and update the code to test the property voidDate
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property wrapCode (base name: "wrapCode")', function() {
      // uncomment below and update the code to test the property wrapCode
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property extrinsicText1 (base name: "extrinsicText1")', function() {
      // uncomment below and update the code to test the property extrinsicText1
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property extrinsicText2 (base name: "extrinsicText2")', function() {
      // uncomment below and update the code to test the property extrinsicText2
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property extrinsicText3 (base name: "extrinsicText3")', function() {
      // uncomment below and update the code to test the property extrinsicText3
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property extrinsicNumber1 (base name: "extrinsicNumber1")', function() {
      // uncomment below and update the code to test the property extrinsicNumber1
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property extrinsicNumber2 (base name: "extrinsicNumber2")', function() {
      // uncomment below and update the code to test the property extrinsicNumber2
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property extrinsicDecimal1 (base name: "extrinsicDecimal1")', function() {
      // uncomment below and update the code to test the property extrinsicDecimal1
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property extrinsicDecimal2 (base name: "extrinsicDecimal2")', function() {
      // uncomment below and update the code to test the property extrinsicDecimal2
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property casebreakEnabled (base name: "casebreakEnabled")', function() {
      // uncomment below and update the code to test the property casebreakEnabled
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property vendorId (base name: "vendorId")', function() {
      // uncomment below and update the code to test the property vendorId
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property vendorPrice (base name: "vendorPrice")', function() {
      // uncomment below and update the code to test the property vendorPrice
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property vendorPer (base name: "vendorPer")', function() {
      // uncomment below and update the code to test the property vendorPer
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property modifyDate (base name: "modifyDate")', function() {
      // uncomment below and update the code to test the property modifyDate
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property behaviorType (base name: "behaviorType")', function() {
      // uncomment below and update the code to test the property behaviorType
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property forwardLotMixingRule (base name: "forwardLotMixingRule")', function() {
      // uncomment below and update the code to test the property forwardLotMixingRule
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property storageLotMixingRule (base name: "storageLotMixingRule")', function() {
      // uncomment below and update the code to test the property storageLotMixingRule
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property forwardItemMixingRule (base name: "forwardItemMixingRule")', function() {
      // uncomment below and update the code to test the property forwardItemMixingRule
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property storageItemMixingRule (base name: "storageItemMixingRule")', function() {
      // uncomment below and update the code to test the property storageItemMixingRule
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property allocationRule (base name: "allocationRule")', function() {
      // uncomment below and update the code to test the property allocationRule
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property barcodeField (base name: "barcodeField")', function() {
      // uncomment below and update the code to test the property barcodeField
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property warehouseDisplayField (base name: "warehouseDisplayField")', function() {
      // uncomment below and update the code to test the property warehouseDisplayField
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property productIdTagSchemeId (base name: "productIdTagSchemeId")', function() {
      // uncomment below and update the code to test the property productIdTagSchemeId
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property hazmat (base name: "hazmat")', function() {
      // uncomment below and update the code to test the property hazmat
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property isAlcohol (base name: "isAlcohol")', function() {
      // uncomment below and update the code to test the property isAlcohol
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property alcoholType (base name: "alcoholType")', function() {
      // uncomment below and update the code to test the property alcoholType
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property alcoholContent (base name: "alcoholContent")', function() {
      // uncomment below and update the code to test the property alcoholContent
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property alcoholContainer (base name: "alcoholContainer")', function() {
      // uncomment below and update the code to test the property alcoholContainer
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property alcoholVintageYear (base name: "alcoholVintageYear")', function() {
      // uncomment below and update the code to test the property alcoholVintageYear
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property alcoholCountry (base name: "alcoholCountry")', function() {
      // uncomment below and update the code to test the property alcoholCountry
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property alcoholState (base name: "alcoholState")', function() {
      // uncomment below and update the code to test the property alcoholState
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property alcoholRegion (base name: "alcoholRegion")', function() {
      // uncomment below and update the code to test the property alcoholRegion
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property alcoholBrand (base name: "alcoholBrand")', function() {
      // uncomment below and update the code to test the property alcoholBrand
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property alcoholUPCCode (base name: "alcoholUPCCode")', function() {
      // uncomment below and update the code to test the property alcoholUPCCode
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property alcoholNAMBCACode (base name: "alcoholNAMBCACode")', function() {
      // uncomment below and update the code to test the property alcoholNAMBCACode
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property alcoholUNIMERCCode (base name: "alcoholUNIMERCCode")', function() {
      // uncomment below and update the code to test the property alcoholUNIMERCCode
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property alcoholSCCCode (base name: "alcoholSCCCode")', function() {
      // uncomment below and update the code to test the property alcoholSCCCode
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property length (base name: "length")', function() {
      // uncomment below and update the code to test the property length
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property width (base name: "width")', function() {
      // uncomment below and update the code to test the property width
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property height (base name: "height")', function() {
      // uncomment below and update the code to test the property height
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property topUp (base name: "topUp")', function() {
      // uncomment below and update the code to test the property topUp
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property shipSolo (base name: "shipSolo")', function() {
      // uncomment below and update the code to test the property shipSolo
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property inventoryUpdateTimestamp (base name: "inventoryUpdateTimestamp")', function() {
      // uncomment below and update the code to test the property inventoryUpdateTimestamp
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property availableQuantity (base name: "availableQuantity")', function() {
      // uncomment below and update the code to test the property availableQuantity
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property damagedQuantity (base name: "damagedQuantity")', function() {
      // uncomment below and update the code to test the property damagedQuantity
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property inFulfillmentProcessQuantity (base name: "inFulfillmentProcessQuantity")', function() {
      // uncomment below and update the code to test the property inFulfillmentProcessQuantity
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property onHandQuantity (base name: "onHandQuantity")', function() {
      // uncomment below and update the code to test the property onHandQuantity
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property openOrderQuantity (base name: "openOrderQuantity")', function() {
      // uncomment below and update the code to test the property openOrderQuantity
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property openPOQuantity (base name: "openPOQuantity")', function() {
      // uncomment below and update the code to test the property openPOQuantity
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property orderableQuantity (base name: "orderableQuantity")', function() {
      // uncomment below and update the code to test the property orderableQuantity
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property unallocatableQuantity (base name: "unallocatableQuantity")', function() {
      // uncomment below and update the code to test the property unallocatableQuantity
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property unavailableQuantity (base name: "unavailableQuantity")', function() {
      // uncomment below and update the code to test the property unavailableQuantity
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property overallDaysOnHand (base name: "overallDaysOnHand")', function() {
      // uncomment below and update the code to test the property overallDaysOnHand
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property overallStockStatus (base name: "overallStockStatus")', function() {
      // uncomment below and update the code to test the property overallStockStatus
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

    it('should have the property customFields (base name: "customFields")', function() {
      // uncomment below and update the code to test the property customFields
      //var instane = new infoplus.Item();
      //expect(instance).to.be();
    });

  });

}));
